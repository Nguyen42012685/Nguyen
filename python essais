def evolve_prompts(base_prompt: str, population_size: int, generations: int, 
                   fitness_function: Callable, mutation_rate: float, output_file: str) -> Prompt:
    population = initialize_population(population_size, base_prompt)
    
    with open(output_file, 'w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['Generation', 'Prompt', 'Fitness'])
        
        for generation in range(generations):
            evaluate_fitness(population, fitness_function)
            
            new_population = []
            
            while len(new_population) < population_size:
                parents = select_parents(population, 2)
                child = crossover(parents[0], parents[1])
                child = mutate(child, mutation_rate)
                new_population.append(child)
            
            population = new_population
            
            best_prompt = max(population, key=lambda x: x.fitness)
            print(f"Generation {generation + 1}: Best fitness = {best_prompt.fitness}")
            print(f"Best prompt: {best_prompt.text[:100]}...")  # Print first 100 characters
            
            # Write all prompts from this generation to the CSV file
            for i, prompt in enumerate(population):
                wrapped_text = textwrap.fill(prompt.text, width=80)
                writer.writerow([f"{generation + 1}.{i + 1}", wrapped_text, prompt.fitness])
            
            # Add a blank row between generations for readability
            writer.writerow([])
        
        evaluate_fitness(population, fitness_function)
        best_prompt = max(population, key=lambda x: x.fitness)
        
        # Write the best prompt at the end of the file
        writer.writerow(['Best Prompt', '', ''])
        wrapped_best_text = textwrap.fill(best_prompt.text, width=80)
        writer.writerow(['', wrapped_best_text, best_prompt.fitness])
        writer.writerow(['', 'This is the best evolved prompt.', ''])
    
    return best_prompt


    def example_fitness_function(text: str) -> float:
    score = 0
    lower_text = text.lower()
    
    key_phrases = ['act as three persons', 'jack, joe and jill', 'went up the hill', 
                   'playing a game', 'each person utters a word', 'looks like a story',
                   '200 word long story', 'simulate the conversation']
    for phrase in key_phrases:
        if phrase in lower_text:
            score += 5
    
    # Check for $Word placeholders
    for word in ['$Word1', '$Word2', '$Word3']:
        if word in text:
            score += 10
    
    # Check for the final demonstration phrase
    if '"$Word1+$Word2+\'to the\'+$Word3"' in text:
        score += 20
    
    # Favor prompts close to the original length
    original_length = len(base_system_prompt.split())
    current_length = len(text.split())
    score -= abs(original_length - current_length) * 0.1
    
    return score

    def crossover(parent1: Prompt, parent2: Prompt) -> Prompt:
    sentences1 = nltk.sent_tokenize(parent1.text)
    sentences2 = nltk.sent_tokenize(parent2.text)
    
    crossover_point = random.randint(0, min(len(sentences1), len(sentences2)) - 1)
    new_sentences = sentences1[:crossover_point] + sentences2[crossover_point:]
    
    return Prompt(' '.join(new_sentences))

    def mutate(prompt: Prompt, mutation_rate: float) -> Prompt:
    sentences = nltk.sent_tokenize(prompt.text)
    mutated_sentences = []
    
    for sentence in sentences:
        if random.random() < mutation_rate:
            mutated_sentences.append(vary_sentence(sentence))
        else:
            mutated_sentences.append(sentence)
    
    return Prompt(' '.join(mutated_sentences))
